# Copyright 2010 by Sean Luke and George Mason University
# Licensed under the Academic Free License version 3.0
# See the file "LICENSE" for more information


# Be sure to set the multiobjective fitness size as shown in ../multiobjective.params
# Likewise note that ../multiobjective.params sets the statistics

### IMPORTANT NOTE: NSGA2 assumes that you're using tournament selection.
# You could use another selection operator if you so chose, but it wouldn't
# be the same as the standard NSGA2 algorithm

#bound the search space
#pop.subpop.0.species.min-gene.0 = 0
#pop.subpop.0.species.min-gene.1 = 0

#pop.subpop.0.species.max-gene.0 = 0.5
#pop.subpop.0.species.max-gene.1 = 3


#define the Problem                                                                                             #CHANGES













#parameters for the Evolve Object:
verbosity	= 0
flush		= true
store		= true

breedthreads	= 1
evalthreads	    = 1
seed.0		    = time

state		    = ec.simple.SimpleEvolutionState



#the parameters for the SimpleEvolutionState Object                                                             #CHANGES: breeder
pop		    = ec.Population
init		= ec.simple.SimpleInitializer
finish		= ec.simple.SimpleFinisher

es.mu.0    = 20
es.lambda.0 = 140
breed =	ec.multiobjective.nsga2.NSGA2Breeder

eval		= ec.simple.SimpleEvaluator
exch		= ec.simple.SimpleExchanger
#additional Parameters for SimpleEvolutionState:
generations		        = 100
#generations             = 1
quit-on-run-complete	= false
checkpoint		        = false
checkpoint-prefix	    = ec
checkpoint-modulo	    = 1



#define the Statistice Files                                                                                    #CHANGES: for faster runntime
parent.0                    = ../TraceableVectorStatistics/traceableVectorStatistics.params
#parent.0                    = ../TraceableVectorStatistics/justStartingPopulationStatistics.params

# Use a statistics object which dumps the front:
#stat =                                          ec.multiobjective.MultiObjectiveStatistics
#stat.front =                                    $front.stat
#stat.do-hypervolume =				true
#stat.reference-point = 0.0 0.0



#define some population parameters
pop.subpops		                = 1
pop.subpop.0		            = ec.Subpopulation
pop.subpop.0.size 		        = 1000
pop.subpop.0.duplicate-retries 	= 5
pop.subpop.0.species 		    = ec.vector.FloatVectorSpecies
pop.subpop.0.species.ind	    = ec.vector.TraceableDoubleVectorIndividual


#define the representation parameters                                                                           #CHANGES: mutation-type/prob
pop.subpop.0.species.genome-size	= 2
pop.subpop.0.species.crossover-type	= line
pop.subpop.0.species.line-extension = 0.25
pop.subpop.0.species.mutation-type  = reset
pop.subpop.0.species.mutation-prob	= 0.05


#the number of objectives:
multi.fitness.num-objectives 	= 2

#define the fitness:
pop.subpop.0.species.fitness =				ec.multiobjective.nsga2.NSGA2MultiObjectiveFitness



#define the breeding procedure for the SimpleBreeder                                                            #CHANGES
pop.subpop.0.species.pipe			                     = ec.vector.breed.VectorMutationPipeline
pop.subpop.0.species.pipe.source.0	                 = ec.vector.breed.VectorCrossoverPipeline
pop.subpop.0.species.pipe.source.0.source.0	             = ec.select.TournamentSelection
pop.subpop.0.species.pipe.source.0.source.1         	 = ec.select.TournamentSelection
pop.subpop.0.species.pipe.source.0.source.0.size	     = 2
pop.subpop.0.species.pipe.source.0.source.1.size	     = 2
#breed.elite.0                                            = 2

pop.subpop.0.pipe = ec.vector.VectorMutation
pop.subpop.0.pipe.source.0 = ec.es.ESSelection

# gp.koza.reproduce.source.0 = ec.es.ESSelection
# gp.koza.xover.source.0 = ec.es.ESSelection
# gp.koza.xover.source.1 = ec.select.TournamentSelection
# gp.koza.mutate.source.0 = ec.es.ESSelection





#define the Problem                                                                                             #CHANGES
eval.problem = ec.app.TracableVectorProblems.BinhAndKornFunction




#bound the genome values                                                                                 #CHANGES

pop.subpop.0.species.min-gene.0 = 0
pop.subpop.0.species.min-gene.1 = 0

pop.subpop.0.species.max-gene.0 = 0.5
pop.subpop.0.species.max-gene.1 = 3


pop.subpop.0.species.min-gene	= 0
pop.subpop.0.species.max-gene 	= 3

